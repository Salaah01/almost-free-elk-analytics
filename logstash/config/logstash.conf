input {
  file {
    path => "/usr/share/logstash/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"  # To ensure Logstash processes all logs each time
  }
}

filter {
  if [message] =~ "\[error\]" {  # Detects error logs first
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:loglevel}\] %{NUMBER:pid}#%{NUMBER:tid}: \*%{NUMBER:connection_id} %{GREEDYDATA:error_message}, client: %{IPORHOST:client_ip}, server: %{DATA:server}, request: \"(?:%{WORD:method} %{DATA:request} HTTP/%{NUMBER:http_version})\", host: \"%{DATA:host}\", referrer: \"(?:%{DATA:referrer}|-)\""
      }
    }
  } else if [message] =~ "GET|POST|PUT|DELETE" {  # Detects access logs if no error log is detected
    grok {
      match => { 
        "message" => "%{IPORHOST:client_ip} - %{DATA:ident} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:method} %{URIPATH:request_path}(?:\?%{DATA:query_string})? HTTP/%{NUMBER:http_version})\" %{NUMBER:status} %{NUMBER:bytes} \"(?:%{DATA:referrer}|-)\" \"(?:%{DATA:user_agent}|-)\""
      }
    }
  }

  date {
    match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "ISO8601" ]
  }
}


output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "nginx-logs-%{+YYYY.MM.dd}"
  }

  stdout { codec => rubydebug }
}
